{"name": "Создание проекта", "status": "broken", "statusDetails": {"message": "ValueError: Unexpected status code: 401", "trace": "session = <requests.sessions.Session object at 0x00000174F9149900>\n\n    @pytest.fixture(scope='class')\n    def api_manager(session):\n>       return ApiManager(session)\n\nconftest.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napi\\api_manager.py:15: in __init__\n    self.auth_api = AuthAPI(session)\napi\\auth_api.py:8: in __init__\n    self.authenticate_and_get_csrf()        # вызов метода для авторизации при создании экземпляра класса\napi\\auth_api.py:12: in authenticate_and_get_csrf\n    csrf_token = self.send_request(\"GET\", \"/authenticationTest.html?csrf\").text\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <api.auth_api.AuthAPI object at 0x00000174F9149120>, method = 'GET', endpoint = '/authenticationTest.html?csrf', data = None, expected_status = 200, need_logging = True\n\n    def send_request(self, method, endpoint, data=None, expected_status=StatusCodes.SC_OK, need_logging=True):\n        \"\"\"\n        Враппер для запросов. Позволяет прикручивать различную логику\n    \n        :param method: Метод запроса\n        :param endpoint: Эндпоинт для склейки с BASE_URL в переменной \"url\"\n        :param data: Тело запроса. По умолчанию пустое, чтобы пропускало NO_CONTENT ответы\n        :param expected_status: Ожидаемый статус ответа. Если ожидается иной от SC_OK - передать в методе api-класса\n        :param need_logging: Передача флага для логгирования. По умолчанию = True\n        :return: Возвращает объект ответа\n        \"\"\"\n        url = f\"{self.base_url}{endpoint}\"\n        response = self.session.request(method, url, json=data)\n    \n        if need_logging:\n            self.log_request_and_response(response)\n    \n        if response.status_code != expected_status:\n>           raise ValueError(f\"Unexpected status code: {response.status_code}\")\nE           ValueError: Unexpected status code: 401\n\ncustom_requester\\custom_requestor.py:33: ValueError"}, "description": "Негативный кейс создания проекта с использованием параметризации", "parameters": [{"name": "id_value", "value": "'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'"}, {"name": "desc", "value": "'Более 255 символов'"}, {"name": "assert_cont", "value": "'is 256 characters long while the maximum length is 225'"}], "start": 1702802559173, "stop": 1702802559173, "uuid": "2401c756-ea46-4deb-a595-48955f852ad5", "historyId": "ca79ab1adaa790aceb19c2bc95a22658", "testCaseId": "95dadd55c6d2a34520d9e3bcaa23e359", "fullName": "test.backend.test_create_project_api.TestProjectCreate#test_project_create_negative", "labels": [{"name": "feature", "value": "project"}, {"name": "tag", "value": "negative"}, {"name": "parentSuite", "value": "test.backend"}, {"name": "suite", "value": "test_create_project_api"}, {"name": "subSuite", "value": "TestProjectCreate"}, {"name": "host", "value": "DESKTOP-D74K188"}, {"name": "thread", "value": "2672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.backend.test_create_project_api"}]}